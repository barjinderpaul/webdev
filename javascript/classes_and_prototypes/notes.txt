OBJECTS in JS;

Object Structure :
let objectt = {
    property : value
}

Basic Example : 
let x = {
    a:10,
    b:"ad",
    c:false,
    d:[1,2,3],
    e: {
        p:"add",
        q:true
    }
}

x.new_property = "new value"

console.log(x);


Objects having functions :
let obj = {
    anNumber : 123,
    aString : "abc",
    aFunction : function(){
        return (this.anNumber + this.aString);
    }
}

console.log(obj.aFunction())

Note -: this. is used to refer things inside the same object


NEW keyword;

function fruit (color,taste){
    this.color = color;
    this.taste = taste;
}

let orange = new fruit("orange","sour");
let apple  = new fruit("red","sweet");

let mango = {
    color:"yellow",
    taste:"sweet"
}

console.log(orange)
console.log(apple)

// orange, apple and mango are all objects but orange and mango behave has objects of fruit class



*Autoboxing : 

functione fun() {
    //Stuff her
}

fun()     //here this refers to global
new fun() // here JS creates an empty object and runs function inside that object/box, therefore, 'this' refers to that new box which is created;

function foo2() {
    this.p = "something"
    return 10;
} 

let o1 = foo2();
let o2 = new foo2();
console.log(o1)
console.log(o2) // return statement has no value when called with 'new' keyword, the box/object is returned when a function is called with 'new'
console.log(o1.p)
console.log(o2.p) 



//All global items/functions are present in global object;
//Only works in nodejs and not in browser;
//In browser, everything is present inside 'window';


Classes in JS:
JS emulates classes but does not comes close to actually implementing classes like c++,java do;

function Person (name,age) {
    this.firstName = name.split(" ")[0];
    this.lastName = name.split(" ")[1];
    this.age = age;
    this.isAdult = () => age >= 18;
}

let person1 = new Person("John Doe",21);

//This will create an object with :
Person {firstName:"John",lastName:"Doe",age:21,isAdult :[Function]}


Prototypes in JS;
With prototypes, we can emulate inheritance in JS;

let p = {
    a:10
}

let q = Object.create(p);
q.b = 20;

let r = Object.create(q);
r.c = 30;

console.log(p)
console.log(q)
console.log(r)

R contains objects of q and q contains object of p;
Thus R contains object of p as well similar to inheritance in cpp/java.
This all happens when we create an object with Object.create(object);
Whenever, we use Object.create(), it creates a field __proto__ inside our new object, which contains the contents of the parent object.

console.log(r.__proto__ === q) //True
console.log(r.__proto__.__proto__ === p) //True

We cannot change value of p or q by r;
If we try to change the value, we do COW (copy on write), which basically means that we are 
just creating a local copy in our current object

Verification : 

q.a = q.a + 1   //this does not change the value of p.a but it just creates a property 'a' in q with value q.a(from __proto__)+1 (because __proto__ is read only)
console.log(`Checking`)
console.log(q.__proto__)
console.log(r.__proto__)    //Will inherit both b:20 and a:11 from q
console.log(q)  // {b:20,a:11} a:11 because in line 45, we created another property of q
console.log(r)
console.log(r.a)
console.log(q.a)
console.log(p.a)


